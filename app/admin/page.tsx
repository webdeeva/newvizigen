"use client"

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Loader2, Save, Share2, Wand2 } from 'lucide-react';
import DashboardLayout from '../components/DashboardLayout';

interface User {
  _id: string;
  username: string;
  email: string;
  createdAt: string;
  imageCount: number;
  isAdmin: boolean;
  isSuspended: boolean;
}

const models = [
  { value: 'flux-dev', label: 'Flux Dev' },
  { value: 'flux-schnell', label: 'Flux Schnell' },
  { value: 'flux-pro', label: 'Flux Pro' },
];

export default function AdminPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const [error, setError] = useState('');
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [prompt, setPrompt] = useState('');
  const [model, setModel] = useState('flux-pro');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [dialogMessage, setDialogMessage] = useState('');
  const [generatedImageUrl, setGeneratedImageUrl] = useState('');

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/login');
    } else if (status === 'authenticated') {
      fetchUsers();
    }
  }, [status, router]);

  const fetchUsers = async () => {
    try {
      const response = await fetch('/api/admin/users');
      if (!response.ok) {
        throw new Error('Failed to fetch users');
      }
      const data = await response.json();
      setUsers(data);
    } catch (err) {
      setError('Failed to load users');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleUserAction = async (userId: string, action: 'suspend' | 'delete' | 'promote') => {
    try {
      const response = await fetch(`/api/admin/users/${userId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action }),
      });
      if (!response.ok) {
        throw new Error(`Failed to ${action} user`);
      }
      fetchUsers(); // Refresh the user list
    } catch (err) {
      setError(`Failed to ${action} user`);
      console.error(err);
    }
  };

  const handleSwitchUser = (user: User | null) => {
    setCurrentUser(user);
    setGeneratedImageUrl('');
  };

  const handleGenerateImage = async () => {
    if (!currentUser) {
      setError('Please select a user first');
      return;
    }

    setGenerating(true);
    setError('');

    try {
      const generateResponse = await fetch('/api/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          prompt,
          userId: currentUser._id,
          model,
          isPublic: true // Always make images generated by admin public
        }),
      });

      if (!generateResponse.ok) {
        throw new Error('Failed to generate image');
      }

      const generateData = await generateResponse.json();
      console.log('Image generated:', generateData);

      // Save the generated image
      const saveResponse = await fetch('/api/images/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: currentUser._id,
          prompt,
          imageUrl: generateData.output[0],
          model,
          isPublic: true
        }),
      });

      if (!saveResponse.ok) {
        throw new Error('Failed to save image');
      }

      const saveData = await saveResponse.json();
      console.log('Image saved:', saveData);

      setGeneratedImageUrl(generateData.output[0]);
      setPrompt('');
      fetchUsers(); // Refresh user list to update image count
      setDialogMessage('Image generated and saved successfully!');
      setIsDialogOpen(true);
    } catch (err) {
      setError('Failed to generate or save image');
      console.error(err);
    } finally {
      setGenerating(false);
    }
  };

  const createFakeUsers = async () => {
    try {
      const response = await fetch('/api/admin/create-fake-users', {
        method: 'POST',
      });
      if (!response.ok) {
        throw new Error('Failed to create fake users');
      }
      fetchUsers(); // Refresh the user list
    } catch (err) {
      setError('Failed to create fake users');
      console.error(err);
    }
  };

  const gradientButtonClass = "bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white";
  const blueButtonClass = "bg-blue-500 hover:bg-blue-600 text-white";
  const redButtonClass = "bg-red-500 hover:bg-red-600 text-white";

  const content = (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-6 bg-gradient-to-r from-purple-400 to-pink-600 text-transparent bg-clip-text">Admin Dashboard</h1>
      <Tabs defaultValue="users">
        <TabsList>
          <TabsTrigger value="users">Users</TabsTrigger>
          <TabsTrigger value="generate">Generate Images</TabsTrigger>
          <TabsTrigger value="prompt-generator">Prompt Generator</TabsTrigger>
          <TabsTrigger value="credit-system">Credit System</TabsTrigger>
        </TabsList>
        <TabsContent value="users">
          <Card className="bg-gray-900 text-white border border-gray-800">
            <CardHeader>
              <CardTitle>User Management</CardTitle>
            </CardHeader>
            <CardContent>
              <Button onClick={createFakeUsers} className={`mb-4 ${gradientButtonClass}`}>Create 10 Fake Users</Button>
              {loading ? (
                <p>Loading users...</p>
              ) : error ? (
                <p className="text-red-500">{error}</p>
              ) : (
                <table className="w-full">
                  <thead>
                    <tr>
                      <th className="text-left">Username</th>
                      <th className="text-left">Email</th>
                      <th className="text-left">Joined</th>
                      <th className="text-left">Images</th>
                      <th className="text-left">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {users.map((user) => (
                      <tr key={user._id}>
                        <td>{user.username}</td>
                        <td>{user.email}</td>
                        <td>{new Date(user.createdAt).toLocaleDateString()}</td>
                        <td>{user.imageCount}</td>
                        <td>
                          <Button
                            onClick={() => handleUserAction(user._id, user.isSuspended ? 'suspend' : 'suspend')}
                            size="sm"
                            className={`mr-2 ${blueButtonClass}`}
                          >
                            {user.isSuspended ? 'Unsuspend' : 'Suspend'}
                          </Button>
                          <Button
                            onClick={() => handleUserAction(user._id, 'delete')}
                            size="sm"
                            className={`mr-2 ${redButtonClass}`}
                          >
                            Delete
                          </Button>
                          {!user.isAdmin && (
                            <Button
                              onClick={() => handleUserAction(user._id, 'promote')}
                              size="sm"
                              className={gradientButtonClass}
                            >
                              Promote to Admin
                            </Button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="generate">
          <Card className="bg-gray-900 text-white border border-gray-800">
            <CardHeader>
              <CardTitle>Generate Images as User</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <label className="block mb-2">Select User:</label>
                <select 
                  className="w-full p-2 bg-gray-800 border border-gray-700 rounded"
                  onChange={(e) => handleSwitchUser(users.find(u => u._id === e.target.value) || null)}
                  value={currentUser?._id || ''}
                >
                  <option value="">Select a user</option>
                  {users.map(user => (
                    <option key={user._id} value={user._id}>{user.username}</option>
                  ))}
                </select>
              </div>
              <div className="mb-4">
                <label className="block mb-2">Select Model:</label>
                <Select value={model} onValueChange={setModel}>
                  <SelectTrigger className="w-full bg-gray-800 border-gray-700 text-white">
                    <SelectValue placeholder="Select a model" />
                  </SelectTrigger>
                  <SelectContent className="bg-gray-800 border-gray-700 text-white">
                    {models.map((m) => (
                      <SelectItem key={m.value} value={m.value}>{m.label}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="mb-4">
                <label className="block mb-2">Prompt:</label>
                <Textarea
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  className="w-full p-2 bg-gray-800 border border-gray-700 rounded"
                />
              </div>
              <Button 
                onClick={handleGenerateImage} 
                disabled={!currentUser || !prompt || generating} 
                className={`${gradientButtonClass} ${generating ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                {generating ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  'Generate Image'
                )}
              </Button>
              {error && <p className="text-red-500 mt-2">{error}</p>}
              {generatedImageUrl && (
                <div className="mt-4">
                  <h3 className="text-xl font-bold mb-2">Generated Image:</h3>
                  <img src={generatedImageUrl} alt="Generated" className="w-full max-w-md rounded-lg shadow-lg" />
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="prompt-generator">
          <Card className="bg-gray-900 text-white border border-gray-800">
            <CardHeader>
              <CardTitle>Prompt Generator Options</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Prompt Generator options management will be implemented here.</p>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="credit-system">
          <Card className="bg-gray-900 text-white border border-gray-800">
            <CardHeader>
              <CardTitle>Credit System</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Credit system management will be implemented here.</p>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Success</DialogTitle>
          </DialogHeader>
          <p>{dialogMessage}</p>
        </DialogContent>
      </Dialog>
    </div>
  );

  return <DashboardLayout>{content}</DashboardLayout>;
}
